---
source: src/ast_parser/test.rs
expression: expect_parse(program)

---
Program {
    struct_decls: [],
    fn_prototypes: [],
    variables: [
        VariableDecl {
            name: "temp",
            ty: RefMut {
                origin: "'temp",
                ty: Struct {
                    name: "Thing",
                    parameters: [],
                },
            },
        },
        VariableDecl {
            name: "t0",
            ty: RefMut {
                origin: "'t0",
                ty: Struct {
                    name: "Thing",
                    parameters: [],
                },
            },
        },
        VariableDecl {
            name: "v",
            ty: RefMut {
                origin: "'v",
                ty: Struct {
                    name: "Thing",
                    parameters: [],
                },
            },
        },
    ],
    basic_blocks: [
        BasicBlock {
            name: "bb0",
            statements: [
                Spanned {
                    span: Span {
                        start: 127,
                        end: 154,
                    },
                    inner: Assign(
                        Place {
                            base: "temp",
                            fields: [],
                        },
                        Access {
                            kind: BorrowMut(
                                "'L_Thing",
                            ),
                            place: Place {
                                base: "Thing",
                                fields: [],
                            },
                        },
                    ),
                },
            ],
            successors: [
                "bb1",
            ],
        },
        BasicBlock {
            name: "bb1",
            statements: [
                Spanned {
                    span: Span {
                        start: 215,
                        end: 240,
                    },
                    inner: Assign(
                        Place {
                            base: "t0",
                            fields: [],
                        },
                        Access {
                            kind: BorrowMut(
                                "'L_*temp",
                            ),
                            place: Place {
                                base: "*temp",
                                fields: [],
                            },
                        },
                    ),
                },
                Spanned {
                    span: Span {
                        start: 253,
                        end: 276,
                    },
                    inner: Assign(
                        Place {
                            base: "v",
                            fields: [],
                        },
                        Call {
                            name: "MaybeNext",
                            arguments: [
                                Access {
                                    kind: Move,
                                    place: Place {
                                        base: "t0",
                                        fields: [],
                                    },
                                },
                            ],
                        },
                    ),
                },
            ],
            successors: [
                "bb2",
                "bb3",
            ],
        },
        BasicBlock {
            name: "bb2",
            statements: [
                Spanned {
                    span: Span {
                        start: 342,
                        end: 356,
                    },
                    inner: Assign(
                        Place {
                            base: "temp",
                            fields: [],
                        },
                        Access {
                            kind: Move,
                            place: Place {
                                base: "v",
                                fields: [],
                            },
                        },
                    ),
                },
            ],
            successors: [
                "bb4",
            ],
        },
        BasicBlock {
            name: "bb3",
            statements: [],
            successors: [
                "bb4",
            ],
        },
        BasicBlock {
            name: "bb4",
            statements: [],
            successors: [
                "bb1",
            ],
        },
    ],
}
