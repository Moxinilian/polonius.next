// Corresponds to `killing-and-murder`, but with the "saving" re-assignment to `x` removed.

// let p = 22;
// let mut x: &mut i32 = &mut p; // `x` points at `p`
// let y = &mut *x; // `y` points at `p` too
// *y = 11; 
// use(x); // ERROR: both `x` and `y` are used

// Decls
// let p: u32
// let x: &'x mut u32
// let y: &'y mut u32
// 
// Loan origins:
// 'L_p: `x`'s borrow of `p` 
// 'L_*x: `y`'s borrow of `*x`

a: "p = 22" {
    invalidate_origin('L_p)
    goto b
}

b: "x = &'L_p mut p" {
    // Clear all origins in `x` (overwritten plan):
    clear_origin('x)

    // Clear 'L_p because it's being recreated
    clear_origin('L_p)

    // `&'L_p mut u32 <: &'x mut u32`
    introduce_subset('L_p, 'x) 
    goto c
}

c: "y = &'L_*x mut *x" {
    // Access `*x` [== `p`] where `x: &'x mut u32`
    access_origin('x)
    invalidate_origin('L_*x)

    // Clear all origins in `y` (overwritten plan):
    clear_origin('y)

    // Clear 'L_*x because it's being recreated
    clear_origin('L_*x)

    // Unroll `*x`
    introduce_subset('L_*x, 'x)

    // `&'L_*x mut u32 <: &'y mut u32`
    introduce_subset('L_*x, 'y) 
    goto d
}

d: "*y = 11" {
    // Access `*y` [== `p`] where `y: &'y mut u32`
    access_origin('y)

    // Invalidate borrows of the target of `y`, which is `*x`
    invalidate_origin('L_*x)

    goto e
}

e: "use(x)" {
    // Access `x` [== `&mut p`] where `x: &'x mut u32`
    access_origin('x)
    goto
}